/*--------------------------------------------------------------------------------------------------

										Walls Luxor Main Source
	
									　Version RM 6.0 / Build 6010

--------------------------------------------------------------------------------------------------*/

*start_up
	/*変数の初期化*/
		mode="window"								; 表示モード
		language="jp"								; 表示言語
		address="Computer:/"						; エクスプローラーの初期ディレクトリ（Computer:/はSystem/Computerに相当）
		now_sourcecode = "Walls Luxor Main.hsp"		; 現在読み込んでいるソースコード
	
		user_icon_num = 3							; ユーザーアイコンのバッファ番号
		wallpaper_sizeX = 1024
		wallpaper_sizeY = 576
	
		Computer_Pass = "System/Computer"
	
		default_dir = dirinfo(0)
	
	/*バージョン情報の読み込み*/
		notesel about_walls
		noteload "System/Computer/C@Drive/walls/about/about.wal"
		noteget about_walls_title, 1
	
	/*タイトル表示*/
		title about_walls_title
	
	/*表示モード適用*/
		if mode="fullscreen"{								; フルスクリーンモード
			scx=ginfo(20)										; スクリーン全体の解像度x
			scy=ginfo(21)										; スクリーン全体の解像度y
			chgdisp 1,scx,scy									; 全画面化
			bgscr 0,scx,scy,,0,0 : phwnd.0 = hwnd				; 親ウィンドウ作成
		} else {											; ウィンドウモード
			scx=1024											; スクリーン全体の解像度x
			scy=576												; スクリーン全体の解像度y
			screen 0,1024,576 : phwnd.0 = hwnd					;親ウィンドウ作成
		}
	
*dll
/*DLLの読み込み*/
#uselib "user32.dll"
	#func SetParentA "SetParent" int,int					;親子ウィンドウの作成に使う
	#cfunc WindowFromPointA "WindowFromPoint" int, int		;ウィンドウを動かすときに使う
	
	#func MoveWindowA "MoveWindow" int, int, int, int, int, int
	
	#func GetFocusA "GetFocus"								;フォーカスのあるウィンドウのハンドルを取得
	
	#func GetWindowLongA2 "GetWindowLongA" int , int 											;入力ボックスの色を変更するときに使う
	#func SetWindowLongA2 "SetWindowLongA" int , int , int 										
	#func SetLayeredA "SetLayeredWindowAttributes" int , int , int , int 						
	#func SetWindowPosA "SetWindowPos" int, nullptr, nullptr, nullptr, nullptr, nullptr, int	
	
	#func SetTimerA  "SetTimer"  int, int, int, int			;ウィンドウタイマーに使う
	#func KillTimerA "KillTimer" int, int
	#define WM_TIMER        0x0113
	#define ID_TIMER        1
		
#uselib "HSPThread.dll"
	#func HSPCreateThread "HSPCreateThread" int,str,int,int,int,int,int
	
#uselib "msvcrt"
	#func rename "rename" str, str
	
*includes
	#include "hspinet.as"
	
*modules
/*関数の登録↓*/
#module

/*他の言語に変換する関数（使用例：ol("文章"））*/
#defcfunc ol str ltext
	if language@="en"{										
		notesel en : noteload"data/language/en.lf"
		the_text0 = instr(en,0,ltext)
	
		if the_text0=-1{													;文章がなかった場合戻る
			return ltext
		}
		
		the_text0 = strmid( en, the_text0, instr(en,the_text0,";") )
		split the_text0,":",a,the_text
		return the_text
	}
	if language@="on"{										
		notesel en : noteload"data/language/on.lf"
		the_text0 = instr(en,0,ltext)
	
		if the_text0=-1{													;文章がなかった場合戻る
			return ltext
		}
		
		the_text0 = strmid( en, the_text0, instr(en,the_text0,";") )
		split the_text0,":",a,the_text
		return the_text
	}
	if language@="jp"{														;日本語が設定されている場合そのまま変えずにもどる
		return ltext
	}
	
/*指定された範囲内にマウスがあるか確認する関数（使用例：click_range (100, 0, 300, 300) ）*/
#defcfunc click_range int mx, int my, int mx2, int my2
	if mx <= mousex and mx2 >= mousex and my <= mousey and my2 >= mousey {
		return 1
	}else{
		return 0
	}
	
/*新規命令の登録↓*/
/*文字を中央に表示（使用例：cmes "hogehoge", 0, 640, 0, 480, 0）*/
#deffunc cmes str ctext, int cx, int cy, int cx2, int cy2, int redraw_exist
	#include "user32.as"
	RECT = cx, cy, cx2, cy2
	DrawText hdc, ctext, -1, varptr(RECT), $01
	
	if redraw_exist = 0 : redraw 1
	return
	
/*画像をぼかす（hsp/sample/new/gblur.hsp | 使用例：gblur 2）*/
#deffunc gblur int p1, int p2
	gmode 3, ginfo_sx, ginfo_sy, 128
	if (p2&1)=0 {
		repeat p1
		pos 1,0:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),2,0
		loop
	}
	if (p2&2)=0 {
		repeat p1
		pos 0,1:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),0,2
		loop
	}
	return
	
/*半透明色表示命令*/
#deffunc sboxf int depth, int ax, int ay, int bx, int by
	pdx = ax, bx, bx, ax
	pdy = ay, ay, by, by
	gmode 3,,,depth
	gsquare -1,pdx, pdy
	return
	
/*タスクバー表示*/
#deffunc taskbar int ltx, int lty, int rbx, int rby
	time = ""+gettime(4)+":"+strf("%02d", gettime(5))+""
	time@ = time
	
	//まだタスクバーを表示していない場合
		if displayed_taskbar@ = 0 {
			
			//タスクバー部分を半透明色で塗りつぶし
					
				rad = 0.00
					
				repeat
					redraw 0
						
					gmode 0
					pos ltx, lty : gcopy user_Wallpaper_num@, ltx, lty, (rbx-ltx), (rby-lty)
						
					rad += 0.05
					sboxf@ 128, ltx, rby-(sin(rad)*(rby-lty)), rbx, rby
				
					if rby-(sin(rad)*(rby-lty)) = lty+1 {
						gmode 0
						pos ltx, lty : gcopy user_Wallpaper_num@, ltx, lty, (rbx-ltx), (rby-lty)
						break
					}
				
					redraw 1
					wait 1
				loop
			
				gmode 0
				pos ltx, lty : gcopy user_Wallpaper_num@, ltx, lty, (rbx-ltx), (rby-lty)
				
				color 0, 0, 0 : sboxf@ 128, ltx, lty, rbx, rby
			
				wait 10
	
			//現在時刻を表示
				if displayed_taskbar@ = 0 {
					rad = 1.00
				
					repeat
						redraw 0
				
						gmode 0
						pos ltx, lty : gcopy user_Wallpaper_num@, ltx, lty, (rbx-ltx), (rby-lty)
						
						color 0, 0, 0
						sboxf@ 128, ltx, lty, rbx, rby
				
						rad -= 0.05
						color 255, 255, 255 : font ""+systemfont@+"", 16
						pos rbx+70-cos(rad)*140, lty+5 : mes time
				
						if rbx+70-cos(rad)*140 = rbx-70+1 {
							break
						}
				
						redraw 1
						wait 1
					loop
				}
				
				gmode 0
				pos ltx, lty : gcopy user_Wallpaper_num@, ltx, lty, (rbx-ltx), (rby-lty)
			
				color 0, 0, 0 : sboxf@ 128, ltx, lty, rbx, rby
				
				color 255, 255, 255 : font ""+systemfont@+"", 16
				pos rbx-70, lty+5 : mes time
	
			//スタートメニューボタンを表示
				rad = 0.00
		
				repeat
					redraw 0
		
					gmode 0
					pos ltx, lty : gcopy user_Wallpaper_num@, ltx, lty, (ltx+32), (rby-lty)
					
					color 0, 0, 0
					sboxf@ 128, ltx, lty, ltx+32, rby
		
					rad += 0.05
					gmode 2
					pos 2, rby-(sin(rad)*(rby-lty)) : gcopy 2, 0, 0, 30, 30
		
					if rby-(sin(rad)*(rby-lty)) = lty+1 {
						break
					}
		
					redraw 1
					wait 1
				loop
		}
	
		displayed_taskbar@ = 1
	
		redraw 0
		
		gmode 0
		pos ltx, lty : gcopy user_Wallpaper_num@, ltx, lty, (rbx-ltx), (rby-lty)
	
		color 0, 0, 0 : sboxf@ 128, ltx, lty, rbx, rby
	
		color 255, 255, 255 : font ""+systemfont@+"", 16
		pos rbx-70, lty+5 : mes time
	
		gmode 2
		pos 2, lty : gcopy 2, 0, 0, 30, 30
	
		redraw 1
	
	return
	
/*画面をバッファ*/
#deffunc buffering int window_num, int buffer_num
	buffer buffer_num, scx@, scy@
		pos 0, 0 : gcopy window_num, 0, 0, scx@, scy@
	
	gsel 0
	return
	
/*子ウィンドウの作成・表示*/
#deffunc windowmake int wID, int windowx, int windowy, int window_mode, int slide_tof
	if slide_tof = 1 {
		bgscr wID, windowx, windowy, (scx@/2)-(windowx/2), -windowy
	} else {
		bgscr wID, windowx, windowy
	}
	
	phwnd@.wID = hwnd
	windows@=windows@+1		;子ウィンドウの総数
	
	SetParent phwnd@.wID,phwnd@.0
	
	new_wID@++						;次回ウィンドウを作るときのウィンドウID
	windowmode@.wID@ = window_mode	;ウィンドウモード
	
	gsel wID@
	return
	
/*子ウィンドウを上から下にスライドさせる*/
#deffunc windowslide int wID, int windowx, int windowy
	if wID = 0 {
		return
	}
	
	j = windowy + (scy@/2 - windowy/2) + (scy@/2)
	rad = double(0.00)
	
	repeat
		gsel wID@
	
		rad += 0.01
	
		MoveWindowA@ hwnd, (scx@/2)-(windowx/2), (sin(rad)*j)-windowy-scy@/2, windowx, windowy, 1
	
		if rad >= 1.60 {
			break
		}
		
		await 5
	loop
	
	return
	
/*各項目の読み込み（使用例：get_chapter(元の変数, "検索する項目", "始点区切りコード", "終端コード", 検索開始する位置[Byte単位]) ）*/
#defcfunc get_chapter var underlying_var, str search_chapter, str punctuate, str end_word, int begin
	value = instr(underlying_var, begin, search_chapter)
	get_chapter_buf = strmid ( underlying_var, value + begin + strlen(""+search_chapter+""+punctuate+""), instr(underlying_var, value + begin + strlen(""+search_chapter+""+punctuate+""), end_word) )
	
	//valueの内容をvalstat変数に保存
		valstat@ = value
	
	return get_chapter_buf
	
/*ハンドル値からwIDの取得（使用例：get_wID(アクティブなウィンドウのハンドル値) ）*/
#defcfunc get_wID int hwnd_buf
	
	if new_wID@ = 1001 {
		return 0
	}
	
	wID_buf = 0
	
	repeat new_wID@ - first_wID@
		i = cnt+first_wID@
		
		if phwnd@(i) = hwnd_buf {
			wID_buf = i
			break
		}
	loop
	
	return wID_buf
	
/*ハンドル値からwIDの取得（アクティブなウィンドウを関数内で取得 ）*/
#defcfunc get_wID_with_Focus
	Focus_hand = WindowFromPointA@( ginfo(0), ginfo(1) )
	
	if new_wID@ = 1001 {
		return 0
	}
	
	wID_buf = 0
	
	repeat new_wID@ - first_wID@
		i = cnt+first_wID@
		
		if phwnd@(i) = Focus_hand {
			wID_buf = i
			break
		}
	loop
	
	return wID_buf
	
/*スクロールバー設置＆スクロール位置の取得*/
#defcfunc scrollbar int wID, int size_x, int size_y
	gsel wID
	
	return
	
#global

/*------------------------------------------------------------------起動-----------------------------------------------------------------------*/
	
*boot
	/*ここから起動画面*/
		color 0,0,0 : boxf
	
		chdir "System/Computer/C@Drive/walls/img/"
		celload "icons/title.png", 10001
		celload "bar/loading_200px.png", 10002
		celload "wallpapers/default/sunset-123926_1920.jpg", 10003
	
		repeat 32
			redraw 0
	
			gmode 3,,,cnt
			pos 0, 0 : gzoom scx, scy, 10003, 0, 0, 1920, 1077
	
			color 0, 0, 0 : sboxf 255-(cnt*8), 0, 0, scx, scy
			gblur 5
			
			redraw 1
			await 1
		loop
	
	rad = double(0.00)
	
*boot_loading
	gsel 0
	
	repeat 32
		redraw 0
		pos 0, 0 : gzoom scx, scy, 10003, 0, 0, 1920, 1077 : gblur 5
		
		color 255, 255, 255 : gmode 4, 388, 124, cnt*8
		pos scx/2-(388/2), scy/2-124 : gcopy 10001, 0, 0, 388, 124
		
		redraw 1
		await 1
	loop
	
	chdir default_dir
	
	/*ここでファイルを読み込む*/
	/*画像ファイル読み込み*/
		#include "buffer.hsp"
	
		now_sourcecode = "Walls Luxor Main.hsp"		; 現在読み込んでいるソースコード
	
*loading_registered_users
	notesel registered_users
	noteload "System/Computer/C@Drive/user/registered_users.wal"
	
	sdim registered_user, notemax
	
	repeat notemax
		noteget registered_user(cnt), cnt
	loop
	
*boot_after_loading
	/*ここまでファイル読み込み*/		
		rad = double(0.00)
	
	/*変数の初期化*/
		wID = 1000
		new_wID = wID + 1
		first_wID = new_wID
		window_data = ""
		
		new_eID = -1
		
		directory = dirinfo(0)
	
		phwnd(1001) = 0
	
		type_of_wID = ""
	
		user_num = 0
		
		sdim filelist, 1024, 1000, 0
		sdim filelist_with_path, 1024, 1000, 0
		sdim filelist_category, 1024, 1000, 0
		
		sdim covered, 64, scx, scy
	
		dim stat_of_mesbox, 100
		
		sdim last_saved_Sentences, 256, 100
	
	/*背景色を青く*/
		repeat
			redraw 0
		
			rad += 0.05
			
			color 0, 100, 255
			boxf cos(rad)*1024+1024, 0, scx, scy
		
			if cos(rad)*1024+1024 < 0.1 {
				break
			}
		
			redraw 1
			await 10
		loop
	
	/*Welcome!と表示させる*/
		repeat 31
			redraw 0
		
			color 0, 100, 255 : boxf
		
			font "",36
			color double((255/155)*((cnt*5)*255/155)), 100+(cnt*5), 255 : cmes "Welcome!", 0, 240, 1024, 576
		
			redraw 1
			await 5
		loop
		
		wait 200
		
		repeat 31
			redraw 0
		
			color 0, 100, 255 : boxf
		
			font "",36
			color double((255/155)/(255-(cnt*5)*255/155)), 255-(cnt*5), 255 : cmes "Welcome!", 0, 240, 1024, 576
		
			redraw 1
			await 1
		loop
	
		color 0, 100, 255 : boxf
		
		wait 100
	
	/*ユーザー選択*/
		rad = double(0.00)
		
		repeat
			redraw 0
		
			color 0, 100, 255 : boxf
		
			rad += 0.05
		
			pos scx/2- 50, int(sin(rad)*(scy/2 - 100))
			color 254, 254, 254 : gmode 4, 100, 100, 256
			gcopy user_icon_num, 0, 0, 100, 100
			
			redraw 1
		
			if int(sin(rad)*(scy/2 - 50)) >= scy / 2 - 50 - 10 - 1 {
				break
			}
		
			await 10
		loop
	
		//登録されたユーザーを表示（今のところregistered_user.walの一番上に記述されたユーザーのみ）
		repeat 51
			redraw 0
		
			color 0, 100, 255 : boxf 0, scy/2, scx, scy
			
			color cnt, 100+(0.6*(cnt*5)), 255 : font "", 26
			cmes registered_user(user_num), 0, scy/2 + 5, scx, scy/2 + 40
		
			redraw 1
		
			await 1
		loop
			
	wait 200
	
*loading_about_user
	notesel user_config
	noteload "System/Computer/C@Drive/user/"+registered_user(0)+"/config.wal"
	
	noteget user_Password, 1
	noteget user_Icon_num, 3
	noteget user_Wallpaper_num, 5
	noteget systemfont, 7
	
	user_Icon_num = int(user_Icon_num)+2
	user_Wallpaper_num = int(user_Wallpaper_num)+12
	
/*-----------------------------------------------------ログイン画面-----------------------------------------------------------*/

*login
		rad = double(0.00)
		
		repeat
			redraw 0
		
			color 0, 100, 255 : boxf
		
			rad += 0.05
		
			pos scx/2 - 50, int(sin(rad)*50) + scy/2 - 100
			color 254, 254, 254 : gmode 4, 100, 100, 256
			gcopy user_icon_num, 0, 0, 100, 100
			
			redraw 1
		
			if int(sin(rad)*50) + scy/2 - 100 >= scy / 2 - 50 - 1 {
				break
			}
		
			await 10
		loop
		
		rad = double(0.00)
		
		repeat
			redraw 0
		
			rad += 0.05
			
			color 0, 100, 255 : boxf
		
			pos cos(rad)*(scx/4)+(scx/4) - 50, scy / 2 - 50 - 1
			color 254, 254, 254 : gmode 4, 100, 100, 256
			gcopy user_icon_num, 0, 0, 100, 100
			
			redraw 1
		
			if cos(rad)*(scx/4)+(scx/4) - 50 <= 100 {
				break
			}
			
			await 10
		loop
		
		repeat 51
			redraw 0
		
			buffer 998, scx, scy
			color 0, 0, 0 : boxf
			gzoom scx, scy, user_Wallpaper_num, 0, 0, 1024, 576
			
			gsel 0
		
			color 0, 100, 255 : boxf
			
			pos 0, 0 : gmode 3,,,(cnt*5) : gcopy 998, 0, 0, scx, scy
		
			color 0, 0, 0
			sboxf 0.5*(cnt*5), 100, scy/2 - 50, 450, scy/2 + 50
		
			pos cos(rad)*(scx/4)+(scx/4) - 50, scy / 2 - 50 - 1
			color 254, 254, 254 : gmode 4, 100, 100, 256
			gcopy user_icon_num, 0, 0, 100, 100
		
			redraw 1
			
			await 1
		loop
		
		password = ""
		
		objsize 200, 20
		pos 200, scy/2 - 10 : input password : sendmsg objinfo_hwnd(0),204,'*'
	
		gmode 2
		pos 405, scy/2 - 20 : gcopy 18, 0, 0, 40, 40
	
		onclick gosub *login_onclick
	
		//Enterキーを押したら*login_onclickへ
			repeat
				getkey passenter,13
				if passenter = 1 : gosub *login_onclick
				wait 10
			loop
	
		stop
	
*login_onclick
	/*→ボタンがクリックされたときの動作*/
		if click_range (405, scy/2 - 20, 405 + 20, scy/2 + 20) = 1 or passenter = 1 {
			if password = user_Password {
				onclick 0
				
				displayed_taskbar = 0
				goto *desktop_screen	; デスクトップ画面へ
				
			} else {
				color 255, 255, 255 : font systemfont, 18
				pos 200, scy/2 + 20 : mes "パスワードが間違っています"
	
				return
				
			}
		}
	
	return

/*------------------------------------------------------------デスクトップ画面-------------------------------------------------------------------*/

*desktop_screen
	clrobj
	
	now = "desktop_screen"
	
	//親ウィンドウのハンドルを取得
		parent_hwnd = hwnd
		
	//壁紙表示
		repeat 255
			redraw 0
			gmode 3,,,cnt
			pos 0, 0 : gcopy user_Wallpaper_num, 0, 0, wallpaper_sizeX, wallpaper_sizeY
			redraw 1
		loop
	
*desktop_screen_2
	gsel 0
	
	//onclick
		onclick gosub *on_click
	
	//画面全体（タスクバー除く）がデスクトップ画面にあることを示す
		repeat scx
			x = cnt
			repeat (scy-30)
				y = cnt
				covered(x,y) = "desktop_screen"
			loop
		loop
		
	//ショートカット、ウィジェット配置
		font systemfont, 12
		color 255, 255, 255
		
		//マイコンピュータ
			pos 10, 10 : gmode 2 : gcopy 27, 0, 0, 64, 64
			cmes "PC", 10, 10+55, 10+64, 10+70
			
		//設定
			pos 10, 80 : gmode 2 : gcopy 28, 0, 0, 64, 64
			cmes "設定", 10, 80+55, 10+64, 80+70
	
		//Umbrella
			pos 10, 150 : gmode 2 : gcopy 37, 0, 0, 64, 64
			cmes "Umbrella", 10, 150+55, 10+64, 150+70
	
		//Sentences
			pos 10, 220 : gmode 2 : gcopy 61, 0, 0, 64, 64
			cmes "Umbrella", 10, 220+55, 10+64, 220+70
	
	//画面をバッファ
		if sub = 0 {
			buffering 0, 999
		}
	
	//sub=1ならreturn
		if sub = 1 {
			sub = 0
			return
		}
	
	//タスクバー表示
		before_time = time
		
		repeat
			color 0, 0, 0 : taskbar 0, scy-30, scx, scy
	
			if displayed_dashboard = 1 and before_time != time {
				from_desktop_screen_2 = 1
				gosub *dashboard
			}
	
			before_time = time
			
			wait 1
		loop
	
	stop
	
/*--------------------------------------------------------スタートメニュー----------------------------------------------------*/
	
*startmenu
	now = "startmenu"
	
	if displayed_startmenu = 0 {
		rad = 1.00
		rad2 = 0.00
	
		displayed_startmenu = 1
	
		repeat
			redraw 0
			
			gmode 0
			pos 0, 0 : gcopy 999, 0, 0, 250, scy-30
	
			if rad > 0.00 {
				rad -= 0.05
			}
			rad2 += 0.05
			
			color 0, 0, 0
			sboxf 180, cos(rad)*0, scy-30-sin(rad2)*(scy-30), cos(rad)*250, scy-30-sin(rad2)*0
	
			if scy-30-sin(rad2)*(scy-30) = 1 {
				break
			}
			
			redraw 1
			await 15
		loop
	
		gmode 0
		pos 0, 0 : gcopy 999, 0, 0, 250, scy-30
	
		color 0, 0, 0
		sboxf 180, cos(rad)*0, scy-30-sin(rad2)*(scy-30), cos(rad)*250, scy-30-sin(rad2)*0
	
		//スタートメニューに隠れている部分を"startmenu"に変更
			repeat 250
				x = cnt
				repeat (scy-30)
					y = cnt
					covered(x,y) = "startmenu"
				loop
			loop
	
		return
	}
	
	if displayed_startmenu = 1 {
		buffering 0, 998
	
		displayed_startmenu = 0
	
		repeat 128
			redraw 0
	
			gmode 3,,,(255-(cnt*2))
			pos 0, 0 : gcopy 998, 0, 0, 250, scy-30
	
			gmode 3,,,(cnt*2)
			pos 0, 0 : gcopy 999, 0, 0, 250, scy-30
	
			redraw 1
			await 1
		loop
	
		sub = 1
		gosub *desktop_screen_2
	
		return
	}
	
	return
	
/*------------------------------------------------------------------ダッシュボード-----------------------------------------------------------------*/
	
*dashboard
	now = "dashbord"
	
	if displayed_dashboard = 0 or ( from_desktop_screen_2 = 1 and displayed_dashboard = 1 ) {
	
		displayed_dashboard = 1
		from_desktop_screen_2 = 0
	
		redraw 0
	
		gmode 0
		pos scx-200, scy-30-200 : gcopy 999, scx-200, scy-30-200, scx, scy-30
		
		gmode 3,,,255
		color 0, 0, 0 : sboxf 100, scx-200, scy-30-200, scx, scy-30
	
		//ダッシュボードの内容を表示
			font systemfont, 14 : color 255, 255, 255
			pos scx-200+10, scy-30-200+10 : mes ""+gettime(0)+"年"+gettime(1)+"月"+gettime(3)+"日"
		
			font systemfont, 26
			pos scx-200+15, scy-30-200+30 : mes ""+time+""
	
			color 200, 200, 200
			line scx-200+10, scy-30-200+70, scx-10, scy-30-200+70
	
			font systemfont, 12 : color 255, 255, 255
			cmes "通知はありません", scx-200, scy-30-200+80, scx, scy-30-200+100
	
		redraw 1
		
		return
	}
	
	if displayed_dashboard = 1 and from_desktop_screen_2 = 0 {
		buffering 0, 998
		
		displayed_dashboard = 0
	
		repeat 128
			redraw 0
			
			gmode 3,,,(255-(cnt*2))
			pos scx-200, scy-200-30 : gcopy 998, scx-200, scy-200-30, 200, 200
			
			gmode 3,,,(cnt*2)
			pos scx-200, scy-200-30 : gcopy 999, scx-200, scy-200-30, 200, 200
	
			redraw 1
			await 1
		loop
	
		gmode 0
		pos scx-200, scy-200-30 : gcopy 999, scx-200, scy-200-30, 200, 200
	
		sub = 1
		gosub *desktop_screen_2
		
		return
	}
	
	return
	
/*---------------------------------------------------エクスプローラー-----------------------------------------------------*/

*File_Explorer
	now = "File_Explorer"
	wID = new_wID
	
	notesel type_of_wID
	noteadd now, (wID-first_wID), 1
	
	new_eID += 1
	eID = new_eID
	
	notesel File_Explorer__Dir_buf
	noteadd ""+directory+"\\System\\Computer\\", eID, 1
	
	WindowSize_X = 800
	WindowSize_Y = 500
	
	windowmake wID, WindowSize_X, WindowSize_Y, 1, 1
	
	eID_hwnd(eID) = hwnd
	eID_wID(eID) = wID
	
	new_window = wID
	
	//現在アクティブな子ウィンドウを検出（どのウィンドウを消すか）
		GetFocusA : Focus_hand = stat
	
	//最小化ボタン
		objimage 25, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-60, 0 : button "", *window_minimization
		
	//閉じるボタン
		objimage 26, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-30, 0 : button "", *window_close
		close_button_hwnd(wID-first_wID) = objinfo(stat, 2)
	
	//ウィンドウがある位置
		File_Explorer__wx = ginfo_wx1
		File_Explorer__wy = ginfo_wy1
	
*File_Explorer__draw
	//どのエクスプローラーがアクティブか確認
		eID = -1
		
		repeat new_eID+1
			if eID_hwnd(cnt) = Focus_hand {
				eID = cnt
				break
			}
		loop
		
		gsel eID_wID(eID)
		
	//背景色
		color 250, 250, 250 : boxf
	
	//エクスプローラー上部のタブ
		File_Explorer__border_Tabmenu_y = 50
		color 0, 162, 232 : boxf 0, 0, WindowSize_X-1, File_Explorer__border_Tabmenu_y
	
	//エクスプローラー2段めのメニュー
		File_Explorer__border_2nd_menu_y = 80
		color 240, 240, 240 : boxf 0, File_Explorer__border_Tabmenu_y, WindowSize_X, File_Explorer__border_2nd_menu_y
	
	//エクスプローラー左側のメニュー
		File_Explorer__border_Sidemenu_x = 200
		color 50, 50, 50 : boxf 0, File_Explorer__border_2nd_menu_y, File_Explorer__border_Sidemenu_x, WindowSize_Y
	
	//エクスプローラー部分
		gosub *File_Explorer__get_files
	
		color 0, 0, 0
		font systemfont, 14
	
		repeat get_files__total_files(eID)
			//アイコン
				pos File_Explorer__border_Sidemenu_x+20, File_Explorer__border_2nd_menu_y+20+(cnt*32)   : gmode 2
				if filelist_category(eID,cnt) = "Drive" {
					gcopy 20, 0, 0, 30, 30
				} else : if filelist_category(eID,cnt) = "Directory" {
					gcopy 19, 0, 0, 30, 30
				} else : if filelist_category(eID,cnt) = "File" {
					gcopy 21, 0, 0, 30, 30
				} else : if filelist_category(eID,cnt) = "File__ax" {
					gcopy 22, 0, 0, 30, 30
				} else : if filelist_category(eID,cnt) = "File__exe" {
					gcopy 23, 0, 0, 30, 30
				} else : if filelist_category(eID,cnt) = "File__text" {
					gcopy 24, 0, 0, 30, 30
				}
				
			//ファイル名・ディレクトリ名
				pos File_Explorer__border_Sidemenu_x+60, File_Explorer__border_2nd_menu_y+20+(cnt*32)+5 : mes ""+filelist(eID,cnt)+""
		loop
	
	notesel window_data
	noteadd "1", (wID-first_wID), 1
	
	if new_window = wID {
		windowslide wID, WindowSize_X, WindowSize_Y
		new_window = 0
	}
	
	stop
	
*File_Explorer__get_files
	notesel File_Explorer__Dir_buf
	noteget File_Explorer__Dir, eID
	
	chdir File_Explorer__Dir
	
	filelist_buf = ""
	
	//パス名を覗いたファイルとディレクトリの一覧を取得
		dirlist filelist_buf, "*.*", 0
		get_files__total_files(eID) = stat
		
		repeat get_files__total_files(eID)
			//ファイル名・ディレクトリ名
				notesel filelist_buf
				noteget filelist(eID,cnt), cnt
	
			//ファイル・ディレクトリのパス
				filelist_with_path(eID,cnt) = ""+File_Explorer__Dir+"\\"+filelist(eID,cnt)+""
	
			//ファイル・ディレクトリの種類
				filelist_category(eID,cnt) = "Directory"
				
				//ディレクトリ名に特殊文字"%"があった場合
				if instr(filelist(eID,cnt), 0, "@") != -1 {
					if instr(filelist(eID,cnt), 0, "@Drive") != -1 {
						filelist(eID,cnt) = strmid(filelist(eID,cnt), 0, instr(filelist(eID,cnt), 0, "@Drive"))
						filelist(eID,cnt) += "ドライブ（"+filelist(eID,cnt)+":\\）"
						filelist_category(eID,cnt) = "Drive"
					}
				}
	
				//ファイル名に拡張子"."があった場合
				if instr(filelist(eID,cnt), 0, ".") != -1 {
					filelist_category(eID,cnt) = "File"
	
					//拡張子からファイルの種類を判定
					if instr(filelist(eID,cnt), 0, ".ax") != -1 {
						filelist_category(eID,cnt) = "File__ax"
					}
					if instr(filelist(eID,cnt), 0, ".exe") != -1 {
						filelist_category(eID,cnt) = "File__exe"
					}
					if instr(filelist(eID,cnt), 0, ".txt") != -1 {
						filelist_category(eID,cnt) = "File__text"
					}
				}
				
		loop
	
	//カレントディレクトリを元に戻す
		chdir directory
	
	return
	
*run_ax
	/*ax形式のファイルの実行*/
	now = "run_ax"
	
	//実行ファイルの情報を取得
		//初期値
			about_ax__Title = filelist(eID,clicked_file_number)
			about_ax__Size_X = 640
			about_ax__Size_Y = 480
	
		//ファイルの情報ファイル（.aax形式）があれば読み込み
			exist ""+File_Explorer__Dir+"\\about.aax"
		
			if strsize != -1 {
				notesel about_ax
				noteload ""+File_Explorer__Dir+"\\about.aax"
		
				repeat 3
					noteget about_ax_buf, cnt
		
					if instr(about_ax_buf, 0, "Title") != -1 {
						about_ax__Title = get_chapter(about_ax_buf, "Title", " = \"", "\";")
					}
					if instr(about_ax_buf, 0, "Size_X") != -1 {
						about_ax__Size_X = int( get_chapter(about_ax_buf, "Size_X", " = ", ";") )
					}
					if instr(about_ax_buf, 0, "Size_Y") != -1 {
						about_ax__Size_Y = int( get_chapter(about_ax_buf, "Size_Y", " = ", ";") )
					}
				loop
			}
	
	//ウィンドウ作成
		wID = new_wID
	
		notesel type_of_wID
		noteadd now, (wID-first_wID), 1
	
		WindowSize_X_ax = about_ax__Size_X +2
		WindowSize_Y_ax = about_ax__Size_Y +32+1
		
		windowmake wID, WindowSize_X_ax, WindowSize_Y_ax, 1, 0
	
		notesel window_data
		noteadd "1", (wID-first_wID), 1
	
		new_window = wID
		
		onclick gosub *on_click
	
	//最小化ボタン
		objimage 25, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X_ax-60, 0 : button "", *window_minimization
		
	//閉じるボタン
		objimage 26, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X_ax-30, 0 : button "", *window_close
		close_button_hwnd(wID-first_wID) = objinfo(stat, 2)
	
	//タイトルバー及び枠
		color 0, 162, 232 : boxf
	
		font systemfont, 14
	
		color 255, 255, 255
		cmes about_ax__Title, 0, 10, about_ax__Size_X+2, 32
	
	//ディレクトリ変更
		chdir File_Explorer__Dir
	
	//ウィンドウを開いた直後の場合はウィンドウをスライドさせる
		if new_window = wID {
			windowslide wID, WindowSize_X_ax, WindowSize_Y_ax
			new_window = 0
		}
		
	//実行
		HSPCreateThread hwnd, ax_file, 1, 32, about_ax__Size_X, about_ax__Size_Y, 0x100
	
		gsel 0
	
	stop
	
*run_exe
	/*exe形式のファイルの実行（exec）*/
	now = "run_exe"
	onclick gosub *on_click
	
	exec exe_file
	
	stop
	
*open_text
	/*テキストファイルを開く（exec）*/
	now = "open_text"
	onclick gosub *on_click
	
	exec text_file, 16
	
	stop
	
/*------------------------------------------------------------設定-------------------------------------------------------------------*/

*Settings
	/*設定ウィンドウ*/
	now = "Settings"
	
	//ウィンドウ作成
		if from_onclick = 0 {
			wID = new_wID
			
			WindowSize_X = 800
			WindowSize_Y = 500
			
			windowmake wID, WindowSize_X, WindowSize_Y, 1, 1
		
			notesel window_data
			noteadd "1", (wID-first_wID), 1
	
			new_window = wID
			
			onclick gosub *on_click
		}
	
		notesel type_of_wID
		noteadd now, (wID-first_wID), 1
		
		gsel wID
		
		clrobj
		
		onclick gosub *on_click
	
	//最小化ボタン
		objimage 25, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-60, 0 : button "", *window_minimization
		
	//閉じるボタン
		objimage 26, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-30, 0 : button "", *window_close
		close_button_hwnd(wID-first_wID) = objinfo(stat, 2)
	
	//タイトルバー及び枠
		color 0, 61, 51 : boxf
	
		font systemfont, 14
	
		color 255, 255, 255
		cmes "設定", 0, 10, 800+2, 32
	
	//設定のメインメニューを開く
		color 239, 239, 239 : boxf 1, 40, WindowSize_X-2, WindowSize_Y-1
	
		if from_onclick = 0 {
			rad = 1.00
			
			repeat
				rad -= 0.05
				color 0, 105, 92 : boxf 1, 40, cos(rad)*200, WindowSize_Y-1
		
				if cos(rad)*200 >= 199 {
					break
				}
				wait 1
			loop
	
		} else {
			from_onclick = 0
		}
	
		color 0, 105, 92 : boxf 1, 40, 200, WindowSize_Y-1
	
	//左側のメニューに項目を表示させる
		font systemfont, 18
		color 255, 255, 255
	
		pos 10, 50 : gmode 2 : gcopy 29, 0, 0, 32, 32
		pos 45, 53 : mes "メインメニュー"
	
		pos 10, 90 : gmode 2 : gcopy 30, 0, 0, 32, 32
		pos 45, 93 : mes "ユーザー設定"
	
		pos 10, 130 : gmode 2 : gcopy 31, 0, 0, 32, 32
		pos 45, 133 : mes "デザイン設定"
	
		pos 10, 170 : gmode 2 : gcopy 38, 0, 0, 32, 32
		pos 45, 173 : mes "About"
	
	//メインメニュー部分
		color 128, 128, 128
		
		font systemfont, 22
		pos 215, 50 : mes "Wallsの設定"
		
		font systemfont, 14
			
		pos 300, 100 : gmode 2 : gcopy 32, 0, 0, 64, 64
		color 128, 128, 128
		cmes "ユーザー設定", 300-30, 100+64+10, 300+30+64, 100+64+10+20
		
		pos 450, 100 : gmode 2 : gcopy 33, 0, 0, 64, 64
		color 128, 128, 128
		cmes "デザイン設定", 450-30, 100+64+10, 450+30+64, 100+64+10+20
		
		pos 600, 100 : gmode 2 : gcopy 39, 0, 0, 64, 64
		color 128, 128, 128
		cmes "About", 600-30, 100+64+10, 600+30+64, 100+64+10+20
	
	//ウィンドウを開いた直後の場合はウィンドウをスライドさせる
		if new_window = wID {
			windowslide wID, WindowSize_X, WindowSize_Y
			new_window = 0
		}
	
	stop
	
*Settings__User
	now = "Settings__User"
	
	notesel type_of_wID
	noteadd now, (get_wID_with_Focus()-first_wID), 1
	
	gsel get_wID_with_Focus()
	
	clrobj
	
	onclick gosub *on_click
	
	//最小化ボタン
		objimage 25, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-60, 0 : button "", *window_minimization
		
	//閉じるボタン
		objimage 26, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-30, 0 : button "", *window_close
		close_button_hwnd(wID-first_wID) = objinfo(stat, 2)
	
	//タイトルバー及び枠
		color 0, 61, 51 : boxf
	
		font systemfont, 14
	
		color 255, 255, 255
		cmes "設定 - ユーザー設定", 0, 10, 800+2, 32
	
	//設定のメインメニューを開く
		color 239, 239, 239 : boxf 1, 40, 800-2, 500-1
		color 0, 105, 92 : boxf 1, 40, 200, 500-1
	
	//左側のメニューに項目を表示させる
		font systemfont, 18
		color 255, 255, 255
	
		pos 10, 50 : gmode 2 : gcopy 29, 0, 0, 32, 32
		pos 45, 53 : mes "メインメニュー"
	
		pos 10, 90 : gmode 2 : gcopy 30, 0, 0, 32, 32
		pos 45, 93 : mes "ユーザー設定"
	
		pos 10, 130 : gmode 2 : gcopy 31, 0, 0, 32, 32
		pos 45, 133 : mes "デザイン設定"
	
		pos 10, 170 : gmode 2 : gcopy 38, 0, 0, 32, 32
		pos 45, 173 : mes "About"
	
	//設定部分
		color 128, 128, 128
		
		font systemfont, 22
		pos 215, 50 : mes "ユーザー設定"
	
		font systemfont, 14
	
		//ユーザー名
			registered_user_buf = registered_user(user_num)
			
			pos 250, 90 : mes "ユーザー名"
	
			objsize 350, 20
			pos 350, 90 : input registered_user(user_num)
	
		//パスワード
			User_PassWord_buf = User_PassWord
			
			pos 250, 130 : mes "パスワード"
	
			objsize 300, 20
			pos 400, 130 : input User_PassWord : sendmsg objinfo_hwnd(stat),204,'*'
	
			pos 250, 160 : mes "パスワード（確認）"
	
			User_PassWord_Reinput = ""
	
			objsize 300, 20
			pos 400, 160 : input User_PassWord_Reinput : sendmsg objinfo_hwnd(stat),204,'*'
	
		//OKボタン
			objimage -1 : objsize 100, 20
			pos 600, 400 : button gosub "OK", *Settings__User__Save_Config
	
	stop
	
*Settings__User__Save_Config
	if User_PassWord_buf != User_PassWord {
		if User_PassWord_Reinput = "" {
			dialog "パスワードをもう一度入力してください"
			stop
		}
		if User_PassWord != User_PassWord_Reinput {
			dialog "パスワードが一致していません"
			stop
		}
	}
	
	//ユーザー名が変更されている場合はconfig.walがあるフォルダのフォルダ名とregistered_users.walを変更
		if registered_user(user_num) != registered_user_buf {
			rename "System/Computer/C@Drive/user/"+registered_user_buf+"/", "System/Computer/C@Drive/user/"+registered_user(user_num)+""
	
			if stat != 0 {
				dialog "ユーザー名を変更できませんでした。\nユーザー名以外の設定を保存します。", 1
	
				registered_user(user_num) = registered_user_buf
				
			} else {
				notesel registered_users
				noteadd registered_user(user_num), user_num, 1
				notesave "System/Computer/C@Drive/user/registered_users.wal"
			}
		}
		
	notesel user_config
	noteadd user_Password, 1, 1
	
	notesave "System/Computer/C@Drive/user/"+registered_user(user_num)+"/config.wal"
	
	return
	
*Settings__Design
	now = "Settings__Design"
	
	notesel type_of_wID
	noteadd now, (wID-first_wID), 1
	
	gsel get_wID_with_Focus()
	
	clrobj
	
	onclick gosub *on_click
	
	//最小化ボタン
		objimage 25, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-60, 0 : button "", *window_minimization
		
	//閉じるボタン
		objimage 26, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-30, 0 : button "", *window_close
		close_button_hwnd(wID-first_wID) = objinfo(stat, 2)
	
	//タイトルバー及び枠
		color 0, 61, 51 : boxf
	
		font systemfont, 14
	
		color 255, 255, 255
		cmes "設定 - デザイン設定", 0, 10, 800+2, 32
	
	//設定のメインメニューを開く
		color 239, 239, 239 : boxf 1, 40, 800-2, 500-1
		color 0, 105, 92 : boxf 1, 40, 200, 500-1
	
	//左側のメニューに項目を表示させる
		font systemfont, 18
		color 255, 255, 255
	
		pos 10, 50 : gmode 2 : gcopy 29, 0, 0, 32, 32
		pos 45, 53 : mes "メインメニュー"
	
		pos 10, 90 : gmode 2 : gcopy 30, 0, 0, 32, 32
		pos 45, 93 : mes "ユーザー設定"
	
		pos 10, 130 : gmode 2 : gcopy 31, 0, 0, 32, 32
		pos 45, 133 : mes "デザイン設定"
	
		pos 10, 170 : gmode 2 : gcopy 38, 0, 0, 32, 32
		pos 45, 173 : mes "About"
	
	//設定部分
		color 128, 128, 128
		
		font systemfont, 22
		pos 215, 50 : mes "デザイン設定"
	
		font systemfont, 14
	
		//フォント
			pos 250, 90 : mes "現在のフォント : "+systemfont+""
	
			objimage -1 : objsize 100, 20
			pos 330, 110 : button gosub "フォントを選択する", *Settings__Design__choose_font
	
		//OKボタン
			objimage -1 : objsize 100, 20
			pos 600, 400 : button gosub "OK", *Settings__Design__Save_Config
	
	stop
	
*Settings__Design__choose_font
	#uselib "comdlg32.dll"
	#func ChooseFont "ChooseFontA" int
	
	mref bmscr, 67
	dim chfont,16
	dim logfont,16
	sdim setting_SystemFont,32
	
	chfont.0 = 60 
	chfont.1 = bmscr.13
	chfont.3=varptr(logfont)
	chfont.5 = 0x01000141
	
	pm=varptr(chfont)
	ChooseFont pm
	
	if stat = 0 {
		return
	}
	
	style=0
	if (chfont.12 & 0x0100):style=style+1
	if (chfont.12 & 0x0200):style=style+2 
	if (logfont.5 & 0x0000FF00):style=style+4 
	if (logfont.5 & 0x00FF0000):style=style+8
	size=chfont.4/10
	memcpy systemfont,logfont,32,0,28
	
	return
	
*Settings__Design__Save_Config
	notesel user_config
	noteadd systemfont, 7, 1
	
	notesave "System/Computer/C@Drive/user/"+registered_user(0)+"/config.wal"
	
	return
	
*Settings__About
	now = "Settings__About"
	
	notesel type_of_wID
	noteadd now, (wID-first_wID), 1
	
	gsel get_wID_with_Focus()
	
	clrobj
	
	onclick gosub *on_click
	
	//最小化ボタン
		objimage 25, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-60, 0 : button "", *window_minimization
		
	//閉じるボタン
		objimage 26, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-30, 0 : button "", *window_close
		close_button_hwnd(wID-first_wID) = objinfo(stat, 2)
	
	//タイトルバー及び枠
		color 0, 61, 51 : boxf
	
		font systemfont, 14
	
		color 255, 255, 255
		cmes "設定 - About", 0, 10, 800+2, 32
	
	//設定のメインメニューを開く
		color 239, 239, 239 : boxf 1, 40, 800-2, 500-1
		color 0, 105, 92 : boxf 1, 40, 200, 500-1
	
	//左側のメニューに項目を表示させる
		font systemfont, 18
		color 255, 255, 255
	
		pos 10, 50 : gmode 2 : gcopy 29, 0, 0, 32, 32
		pos 45, 53 : mes "メインメニュー"
	
		pos 10, 90 : gmode 2 : gcopy 30, 0, 0, 32, 32
		pos 45, 93 : mes "ユーザー設定"
	
		pos 10, 130 : gmode 2 : gcopy 31, 0, 0, 32, 32
		pos 45, 133 : mes "デザイン設定"
	
		pos 10, 170 : gmode 2 : gcopy 38, 0, 0, 32, 32
		pos 45, 173 : mes "About"
	
	//表示部分
		color 128, 128, 128
	
		font systemfont, 14
	
		//ロゴ＋タイトル
			color 255, 255, 255
			pos 200+43, 80     : gmode 2 : gcopy 1, 0, 0, 124, 124
			pos 200+43+124, 80 : gmode 4, 388, 124, 256 : gcopy 40, 0, 0, 388, 124
	
		//情報取得
			chdir default_dir
			
			notesel about_walls
			noteload ""+Computer_Pass+"/C@Drive/walls/about/about.wal"
	
			noteget about_walls__title, 1
			noteget about_walls__version, 3
			noteget about_walls__build_num, 5
			noteget about_walls__kernel_version, 7
	
		//詳細表示
			color 0, 0, 0
			
			pos 200+150, 250 : mes ""+about_walls__title+"\n\nVersion\nBuild Number\nKernel Version"
			pos 200+300, 250 : mes "\n\n"+about_walls__version+"\n"+about_walls__build_num+"\n"+about_walls__kernel_version+""
	
			font systemfont, 12
			cmes "Copyright (C) 2014-2017 YotioSoft All Rights Reserved.", 200, 470, 800, 500
	
	stop
		
/*----------------------------------------------------------Umbrella-----------------------------------------------------------------*/

*Umbrella
	now = "Umbrella"
	
	wID = new_wID
	
	WindowSize_X = 800
	WindowSize_Y = 500
	
	new_window = wID
	
	windowmake wID, WindowSize_X, WindowSize_Y, 1, 1
	
	notesel window_data
	noteadd "1", (wID-first_wID), 1
	
	onclick gosub *on_click
	
	notesel type_of_wID
	noteadd now, (get_wID_with_Focus()-first_wID), 1
	
	gsel wID
	
	notesel type_of_wID
	noteget type_of_wID__buf, (get_wID_with_Focus()-first_wID)
	
	if type_of_wID != "" and instr(type_of_wID, 0, "Umbrella") = -1 {
		stop
	}
	
	clrobj
	
	//最小化ボタン
		objimage 25, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-60, 0 : button "", *window_minimization
		
	//閉じるボタン
		objimage 26, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-30, 0 : button "", *window_close
		close_button_hwnd(wID-first_wID) = objinfo(stat, 2)
	
	//ベース部分の描写
		gosub *Draw_Umbrella_Background
	
	//ウィンドウを開いた直後の場合はウィンドウをスライドさせる
		if new_window = wID {
			windowslide wID, WindowSize_X, WindowSize_Y
			new_window = 0
		}
	
	//天気表示部分
		#include "umbrella.hsp"
	
	stop
	
*Draw_Umbrella_Background
	color 239, 239, 239 : boxf
	color 30, 136, 229 : boxf 0, 0, 800, 40
	color 106, 183, 255 : boxf 0, 40, 200, 500
	
	font systemfont, 14
	color 255, 255, 255
	cmes "Umbrella", 0, 10, 800+2, 32
	
	return
	
/*---------------------------------------------------------Sentences-----------------------------------------------------------------*/
*Sentences
	now = "Sentences"
	
	wID = new_wID
	
	WindowSize_X = 800
	WindowSize_Y = 500
	
	new_window = wID
	
	windowmake wID, WindowSize_X, WindowSize_Y, 1, 1
	
	notesel window_data
	noteadd "1", (wID-first_wID), 1
	
	onclick gosub *on_click
	
	notesel type_of_wID
	noteadd now, (get_wID_with_Focus()-first_wID), 1
	
	gsel wID
	
	notesel type_of_wID
	noteget type_of_wID__buf, (get_wID_with_Focus()-first_wID)
	
	if type_of_wID != "" and instr(type_of_wID, 0, "Sentences") = -1 {
		stop
	}
	
	clrobj
	
	//最小化ボタン
		objimage 25, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-60, 0 : button "", *window_minimization
		
	//閉じるボタン
		objimage 26, 0, 0, 30, 30 : objsize 30, 30
		pos WindowSize_X-30, 0 : button "", *window_close
		close_button_hwnd(wID-first_wID) = objinfo(stat, 2)
	
	//ベース部分の描写
		gosub *Draw_Sentences_Background
	
	//ウィンドウを開いた直後の場合はウィンドウをスライドさせる
		if new_window = wID {
			windowslide wID, WindowSize_X, WindowSize_Y
			new_window = 0
		}
	
	//メモ帳本体
		#include "sentences.hsp"
	
	stop
	
*Draw_Sentences_Background
	color 239, 239, 239 : boxf
	color 243, 156, 18 : boxf 0, 0, 800, 40
	color 241, 196, 15 : boxf 0, 40, 200, 500
	
	font systemfont, 14
	color 255, 255, 255
	cmes "Sentences", 0, 10, 800+2, 32
	
	//ボタン配置
		gmode 2
		font systemfont, 14
	
		pos 10, 50 : gcopy 58, 0, 0, 30, 30
		pos 10+32+5, 50+5 : mes "新規作成"
	
		pos 10, 50+40 : gcopy 59, 0, 0, 30, 30
		pos 10+32+5, 50+40+5 : mes "開く"
	
		pos 10, 90+40 : gcopy 60, 0, 0, 30, 30
		pos 10+32+5, 90+40+5 : mes "保存"
	
	return
	
/*-------------------------------------------------------ウィンドウ操作--------------------------------------------------------------*/
	
*window_minimization
	/*ウィンドウの最小化*/
	
		dialog"まだ出来ません.."
	
		stop
	
*window_close
	/*ウィンドウを消す（最小化ではない）*/
	
	extant_window = 0
	
	repeat new_wID - first_wID
		;現存する（＝まだ消されていない）ウィンドウがいくつあるか調べる
			notesel window_data
			noteget window_data_buf, cnt
	
			notesel type_of_wID
			noteadd "", (wID-first_wID), 1
			
			if window_data_buf = "1" {
				extant_window ++
			}
	
		;現在アクティブな子ウィンドウを検出（どのウィンドウを消すか）
			GetFocusA : Focus_hand = stat
		
			gsel 0
	
			;ウィンドウを消すボタンと一致していればそのボタンが設置されているウィンドウを消す
			if Focus_hand == close_button_hwnd(cnt) {
				clear_wID = cnt+first_wID
					
				gsel clear_wID, -1
			
				notesel window_data
				noteadd "0", (clear_wID-first_wID), 1
	
				wID = 0
					
				break
			}
	
	loop
	
	gsel 0, 1
	
	sub = 1
	gosub *desktop_screen_2
	
	onclick gosub *on_click
	
	stop
	
/*--------------------------------------------------クリックされたときの動作-------------------------------------------------*/

*on_click
	/*親ウィンドウ・子ウィンドウ問わずクリックされたときの動作*/
	
	//まず子ウィンドウを動かす以外の目的でクリックされていないか確認
		gosub *clicked_on_other_than_windows
	
	//現在アクティブな子ウィンドウを検出（どのウィンドウを動かすか）
		GetFocusA : Focus_hand = stat
	
		title"A "+Focus_hand+""
		
	//現在アクティブなウィンドウが親ウィンドウならreturn
		if Focus_hand = parent_hwnd {
			return
		}
	
	//子ウィンドウを動かす
		now = "on_click"
		
			gsel 0
			;title ""+parent_hwnd+" Focus_hand="+WindowFromPointA( ginfo(0), ginfo(1) )+""
		
		;現在アクティブな子ウィンドウを検出
			repeat new_wID - 1
				if WindowFromPointA( ginfo(0), ginfo(1) ) == phwnd(cnt+1) : wID = cnt+1 : break
			loop
			
			if wID = 0 or windowmode.wID = 2 {
				return
			}
		
	gsel wID
	sendmsg phwnd.wID,$00A1,2,0 
	
	return
	
*clicked_on_other_than_windows
	/*子ウィンドウを動かす以外の目的でクリックされたときの動作*/
	
	//アクティブなウィンドウのハンドル値を取得
		GetFocusA : Focus_hand = stat
		
	//現在アクティブなウィンドウが何のウィンドウかを取得
		notesel type_of_wID
		noteget type_of_wID__buf, (get_wID(Focus_hand)-first_wID)
		
		ic++
		gsel 0 : title"B-"+ic+" "+type_of_wID__buf+" "+get_wID_with_Focus()+" "+Focus_hand+""
		gsel get_wID_with_Focus()
		
	//親ウィンドウ上での動作
		if Focus_hand = parent_hwnd and type_of_wID__buf != "run__ax" {
			gsel 0
			
			//スタートメニュー
				if click_range(0, scy-30, 32, scy) {
					gosub *startmenu
					return
				}
			
			//ダッシュボード
				if click_range(scx-70, scy-30, scx, scy) {
					gosub *dashboard
					return
				}
		
			//デスクトップ画面（*desktop_screen）のアイコン
				if click_range(10, 10, 10+64, 10+70) {
					if covered(mousex,mousey) = "desktop_screen" {
						goto *File_Explorer
					}
				}
	
				if click_range(10, 80, 10+64, 80+70) {
					if covered(mousex,mousey) = "desktop_screen" {
						goto *Settings
					}
				}
	
				if click_range(10, 150, 10+64, 150+70) {
					if covered(mousex,mousey) = "desktop_screen" {
						goto *Umbrella
					}
				}
	
				if click_range(10, 220, 10+64, 220+70) {
					if covered(mousex,mousey) = "desktop_screen" {
						goto *Sentences
					}
				}
		}
	
	//エクスプローラー（*File_Explorer）
		if type_of_wID__buf = "File_Explorer" {
			gsel get_wID_with_Focus()
			gosub *on_click__File_Explorer
		}
	
	//設定（*settings or *settings_○○）
		if type_of_wID__buf = "Settings" or type_of_wID__buf = "Settings__User" or type_of_wID__buf = "Settings__Design" or type_of_wID__buf = "Settings__About" {
			gsel get_wID_with_Focus()
			gosub *on_click__Settings
		}
	
	return
	
*on_click__File_Explorer
	//エクスプローラーのウィンドウにフォーカスがあるか確認
		GetFocusA : Focus_hand = stat
			
		eID = -1
			
		repeat new_eID+1
			if eID_hwnd(cnt) = Focus_hand {
				eID = cnt
				break
			}
		loop
			
	if eID != -1 {
		gsel eID_wID(eID)
		
		//フォルダ・ファイルを開く
			if click_range(File_Explorer__border_Sidemenu_x, File_Explorer__border_2nd_menu_y, WindowSize_X-50, WindowSize_Y) = 1 {
				clicked_file_number = ( ginfo_my-ginfo_wy1-(File_Explorer__border_2nd_menu_y+20) )/32

				if clicked_file_number > get_files__total_files(eID)-1 {
					return
				}

				if filelist_category(eID,clicked_file_number) != "Directory" and filelist_category(eID,clicked_file_number) != "Drive" {
					
					if filelist_category(eID,clicked_file_number) = "File__ax" {
						ax_file = ""+File_Explorer__Dir+"\\"+filelist(eID,clicked_file_number)+""
						goto *run_ax
					} else : if filelist_category(eID,clicked_file_number) = "File__exe" {
						exe_file = ""+File_Explorer__Dir+"\\"+filelist(eID,clicked_file_number)+""
						goto *run_exe
					} else : if filelist_category(eID,clicked_file_number) = "File__text" {
						text_file = ""+File_Explorer__Dir+"\\"+filelist(eID,clicked_file_number)+""
						goto *open_text
					} else {
						return
					}
					
				}
				
				notesel File_Explorer__Dir_buf
				noteadd ""+filelist_with_path(eID, clicked_file_number)+"\\", eID, 1
					
				goto *File_Explorer__draw
			}
			
	}
	
	return
	
*on_click__Settings
	if click_range(10, 50, 200, 90) = 1 {
		from_onclick = 1
		goto *Settings
	}
	if click_range(10, 90, 200, 130) = 1 {
		goto *Settings__User
	}
	if click_range(10, 130, 200, 170) = 1 {
		goto *Settings__Design
	}
	if click_range(10, 170, 200, 210) = 1 {
		goto *Settings__About
	}
	
	if type_of_wID__buf = "Settings" {
		if click_range(300-30, 100, 300+30+64, 100+64+10+20) = 1 {
			goto *Settings__User
		}
		if click_range(450-30, 100, 450+30+64, 100+64+10+20) = 1 {
			goto *Settings__Design
		}
		if click_range(600-30, 100, 600+30+64, 100+64+10+20) = 1 {
			goto *Settings__About
		}
	}
	
	return
	
/*----------------------------------------終了------------------------------------------*/
	
*exit
	end